package redirect

// New Architecture
// Client configures a percentile threshold, appropriate for peak vs off-peak traffic.
// Application continues to generate an actual profile and compare against the threshold profile
// No database
// Redirected traffic should ignore caching and rate limiting??

// Q. How to handle if 1 of 3 instances fail??
// A. There needs to be information in the collective to consolidate this, and also configuration
//    for the redirect. Also need to allow client overrides for success or failure.

// Can always stop redirecting traffic if failure

type LatencyProfile struct {
	Percentile int `json:"percentile"` // Percentile number: 90, 95
	Threshold  int `json:"threshold"`  // In milliseconds
}

// Needs for redirect latency
// For the current window, what is the average latency for a percentile
// Same structure used for add, get, and configured percentile threshold

// The profile generated by the collective will be a direct database rollup call, with a current window.
// This will take care of the peak vs off-peak issues, but the client needs to be aware of the correct
// configuration for peak vs off-peak
//CreatedTS  time.Time `json:"created-ts"`
//Count      int       `json:"count"`
